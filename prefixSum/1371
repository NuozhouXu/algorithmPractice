public int minFlips(String target) {
        int n = target.length();
        Set<String> visited = new HashSet<>();
        Deque<String> queue = new ArrayDeque<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) sb.append("0");
        String initialState = sb.toString();
        if (initialState.equals(target)) return 0;
        queue.offer(initialState);
        int numFlips = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String state = queue.poll();
                char[] chars = state.toCharArray();
                for (int j = n - 1; j >= 0; j--) {
                    chars[j] = chars[j] == '1' ? '0' : '1';
                    String nextState = new String(chars);
                    if (nextState.equals(target)) return numFlips + 1;
                    if (!visited.contains(nextState)) {
                        queue.offer(nextState);
                        visited.add(nextState);
                    }
                }
            }
            numFlips++;
        }
        return numFlips;
    }


public int minFlips(String target) {
        int count = 0;
        int n = target.length();
        char[] state = new char[n];
        for (int i = 0; i < n; i++) state[i] = '0';
        while (!isEqual(state, target)) {
            int firstDiffIndex = -1;
            for (int i = 0; i < n; i++) {
                if (state[i] != target.charAt(i)) {
                    firstDiffIndex = i;
                    break;
                }
            }
            for (int i = firstDiffIndex; i < n; i++) {
                state[i] = state[i] == '1' ? '0' : '1';
            }
            count++;
        }
        return count;
    }
    
    private boolean isEqual(char[] state, String target) {
        for (int i = 0; i < state.length; i++) {
            if (state[i] != target.charAt(i)) return false;
        }
        return true;
    }

class Solution {
    public int minFlips(String target) {
        int count = 0;
        int n = target.length();
        char curr = '1';
        for (int i = 0; i < n; i++) {
            if (target.charAt(i) == curr) {
                curr = (curr == '1' ? '0' : '1');
                count++;
            }
        }
        return count;
    }
}